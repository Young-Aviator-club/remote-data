{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nexport type ArrayTwoOrMore<T> = {\n  0: T;\n  1: T;\n} & Array<T>;\n\nexport type ReturnTypesOfFunctionProps<T> = {\n  [K in keyof T]: T[K] extends (...args: any) => infer R ? R : never;\n}[keyof T];\n\nexport type RemoteDataNotAsked = { type: 'NOT_ASKED' };\nexport type RemoteDataLoading = { type: 'LOADING' };\nexport type RemoteDataReloading = {\n  type: 'RELOADING';\n};\nexport type RemoteDataFailure<E = Error> = { type: 'FAILURE'; error: E };\nexport type RemoteDataSuccess<D = unknown> = { type: 'SUCCESS'; data: D };\nexport type RemoteData<E, D> =\n  | RemoteDataNotAsked\n  | RemoteDataLoading\n  | RemoteDataReloading\n  | RemoteDataFailure<E>\n  | RemoteDataSuccess<D>;\n\nexport type FoldHandlers<E, D, R> = {\n  notAsked: () => R;\n  success: (data: D) => R;\n  loading?: () => R;\n  reloading?: () => R;\n  failure?: (error: E) => R;\n};\n\nexport type FolderHandlersRequired<E, D, R> = Required<\n  Omit<FoldHandlers<E, D, R>, 'reloading'>\n> & {\n  reloading?: () => R;\n};\n\nexport type FoldHandlersA<RDS, R> = {\n  notAsked: () => R;\n  success: (data: Extract<RDS, { type: 'SUCCESS'; data: unknown }>['data'][]) => R;\n  loading?: () => R;\n  reloading?: () => R;\n  failure?: (error: Extract<RDS, { type: 'FAILURE'; error: unknown }>['error'][]) => R;\n};\n\nexport type FolderHandlersARequired<RDS, R> = Required<\n  Omit<FoldHandlersA<RDS, R>, 'reloading'>\n> & {\n  reloading?: () => R;\n};\n\n/**\n * Return NOT_ASKED state\n *\n * @category Constructors\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.notAsked();\n */\nexport const notAsked = (): RemoteDataNotAsked => ({ type: 'NOT_ASKED' });\n\n/**\n * Return LOADING state\n *\n * @category Constructors\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.loading();\n */\nexport const loading = (): RemoteDataLoading => ({ type: 'LOADING' });\n\n/**\n * Return RELOADING state\n *\n * @category Constructors\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.reloading();\n */\nexport const reloading = (): RemoteDataReloading => ({ type: 'RELOADING' });\n\n/**\n * Return SUCCESS state with data\n *\n * @category Constructors\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.success({ userId: 1000 });\n */\nexport const success = <D>(data: D): RemoteDataSuccess<D> => ({\n  type: 'SUCCESS',\n  data,\n});\n\n/**\n * Return FAILURE state with error\n *\n * @category Constructors\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.failure(new Error('error'));\n */\nexport const failure = <E>(error: E): RemoteDataFailure<E> => ({\n  type: 'FAILURE',\n  error,\n});\n\n/**\n * Return true if remoteData is notAsked, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.notAsked();\n *   if (RD.isNotAsked(data)) {\n *     // ...your code\n *   }\n */\nexport function isNotAsked(\n  remoteData: RemoteData<unknown, unknown>,\n): remoteData is RemoteDataNotAsked;\n\n/**\n * Return true if one of remoteData is notAsked, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data1 = RD.notAsked();\n *   const data2 = RD.loading();\n *\n *   if (RD.isNotAsked([data1, data2])) {\n *     // ...your code\n *   }\n */\nexport function isNotAsked(\n  remoteData: ArrayTwoOrMore<RemoteData<unknown, unknown>>,\n): remoteData is ArrayTwoOrMore<RemoteDataNotAsked>;\n\nexport function isNotAsked(remoteData: any) {\n  return Array.isArray(remoteData)\n    ? remoteData.some((rd) => rd.type === 'NOT_ASKED')\n    : remoteData.type === 'NOT_ASKED';\n}\n\n/**\n * Return true if remoteData is loading, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.loading();\n *   if (RD.isLoading(data)) {\n *     // ...your code\n *   }\n */\nexport function isLoading(\n  remoteData: RemoteData<unknown, unknown>,\n): remoteData is RemoteDataLoading;\n\n/**\n * Return true if one of remoteData is loading, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data1 = RD.notAsked();\n *   const data2 = RD.loading();\n *\n *   if (RD.isNotAsked([data1, data2])) {\n *     // ...your code\n *   }\n */\nexport function isLoading(\n  remoteData: ArrayTwoOrMore<RemoteData<unknown, unknown>>,\n): remoteData is ArrayTwoOrMore<RemoteDataLoading>;\n\nexport function isLoading(remoteData: any) {\n  return Array.isArray(remoteData)\n    ? remoteData.some((rd) => rd.type === 'LOADING')\n    : remoteData.type === 'LOADING';\n}\n\n/**\n * Return true if remoteData is reloading, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.reloading();\n *   if (RD.isReloading(data)) {\n *     // ...your code\n *   }\n */\nexport function isReloading(\n  remoteData: RemoteData<unknown, unknown>,\n): remoteData is RemoteDataReloading;\n\n/**\n * Return true if one of remoteData is reloading, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data1 = RD.notAsked();\n *   const data2 = RD.reloading();\n *\n *   if (RD.reloading([data1, data2])) {\n *     // ...your code\n *   }\n */\nexport function isReloading(\n  remoteData: ArrayTwoOrMore<RemoteData<unknown, unknown>>,\n): remoteData is ArrayTwoOrMore<RemoteDataReloading>;\n\nexport function isReloading(remoteData: any) {\n  return Array.isArray(remoteData)\n    ? remoteData.some((rd) => rd.type === 'RELOADING')\n    : remoteData.type === 'RELOADING';\n}\n\n/**\n * Return true if remoteData is success, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.success(1);\n *   if (RD.isSuccess(data)) {\n *     console.log(data.data); // typesave\n *   }\n */\nexport function isSuccess(\n  remoteData: RemoteData<unknown, unknown>,\n): remoteData is RemoteDataSuccess;\n\n/**\n * Return true if ALL of remoteData is success, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data1 = RD.success(1);\n *   const data2 = RD.success(2);\n *\n *   if (RD.isSuccess([data1, data2])) {\n *     console.log(data1.data, data2.data); // typesave\n *   }\n */\nexport function isSuccess(\n  remoteData: ArrayTwoOrMore<RemoteData<unknown, unknown>>,\n): remoteData is ArrayTwoOrMore<RemoteDataSuccess>;\n\nexport function isSuccess(remoteData: any) {\n  return Array.isArray(remoteData)\n    ? remoteData.every((rd) => rd.type === 'SUCCESS')\n    : remoteData.type === 'SUCCESS';\n}\n\n/**\n * Return true if remoteData is failure, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data = RD.failure(new Error('some error'));\n *   if (RD.isFailure(data)) {\n *     // ...your code\n *   }\n */\nexport function isFailure(\n  remoteData: RemoteData<unknown, unknown>,\n): remoteData is RemoteDataFailure;\n\n/**\n * Return true if one of remoteData is failure, else false\n *\n * @category Guards\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   const data1 = RD.failure(new Error('some error'));\n *   const data2 = RD.failure(new Error('some another error'));\n *\n *   if (RD.isFailure([data1, data2])) {\n *     // ...your code\n *   }\n */\nexport function isFailure(\n  remoteData: ArrayTwoOrMore<RemoteData<unknown, unknown>>,\n): remoteData is ArrayTwoOrMore<RemoteDataFailure>;\n\nexport function isFailure(remoteData: any) {\n  return Array.isArray(remoteData)\n    ? remoteData.some((rd) => rd.type === 'FAILURE')\n    : remoteData.type === 'FAILURE';\n}\n\n/**\n * Accept remote data and orElse function and if SUCCESS return data, else all orElse\n *\n * @category Error handling / accessor\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   // example 1\n *   const data = RD.notAsked();\n *   const result = RD.successOrElse(data, () => -1); // -1\n *\n *   // example 2\n *   const data = RD.success(1);\n *   const result = RD.successOrElse(data, () => -1); // 1\n */\nexport function successOrElse<T extends RemoteData<unknown, unknown>, R>(\n  remoteData: T,\n  orElse: () => R,\n): (T extends RemoteDataSuccess<unknown> ? T['data'] : never) | R;\n\n/**\n * Accept array of remote data and orElse function and if ALL SUCCESS return array of\n * data, else all orElse\n *\n * @category Error handling / accessor\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   // example 1\n *   const data1 = RD.notAsked();\n *   const data2 = RD.notAsked();\n *   const result = RD.successOrElse([data1, data2], () => [0, 0]); // [0, 0]\n *\n *   // example 2\n *   const data1 = RD.success(1);\n *   const data2 = RD.success(2);\n *   const [first, second] = RD.successOrElse(data, () => [0, 0]); // [1, 2]\n */\nexport function successOrElse<T extends ArrayTwoOrMore<RemoteData<unknown, unknown>>, R>(\n  remoteData: T,\n  orElse: () => R,\n):\n  | (T extends ArrayTwoOrMore<RemoteDataSuccess<unknown>> ? T[number]['data'][] : never)\n  | R;\n\nexport function successOrElse(remoteData: any, orElse: any) {\n  if (Array.isArray(remoteData)) {\n    return isSuccess(remoteData as ArrayTwoOrMore<RemoteData<unknown, unknown>>)\n      ? remoteData.map((rd) => rd.data)\n      : orElse(remoteData);\n  }\n\n  if (isSuccess(remoteData)) {\n    return remoteData.data;\n  }\n\n  return orElse(remoteData);\n}\n\n/**\n * Accept remote data and object with handlers (state as cb)\n *\n * @category Pattern matching\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   // example 1\n *   const data = RD.notAsked();\n *   const result = RD.fold(data, { notAsked: () => 'no data', loading: () => 'loading...', success: (data) => `data: ${data}`);\n */\nexport function fold<E, D, R>(\n  remoteData: RemoteData<E, D>,\n  foldHandlers: FoldHandlers<E, D, R>,\n): ReturnTypesOfFunctionProps<R>;\n\n/**\n * Accept array of remote data and object with handler (state as cb)\n *\n * @category Pattern matching\n * @example\n *   import { RD } from '@young-aviator-club/remote-data';\n *\n *   // example 1\n *   const data1 = RD.notAsked();\n *   const data2 = RD.notAsked();\n *\n *   // return 'no data':\n *   const result = RD.fold([data1, data2], { notAsked: () => 'no data', loading: () => 'loading...', success: (data) => `data: ${data}`);\n *\n *   // example 2\n *   const data1 = RD.success(1);\n *   const data2 = RD.success(2);\n *\n *   // return 3:\n *   const result = RD.fold([data1, data2], { notAsked: () => 'no data', loading: () => 'loading...', success: ([a, b]) => a + b);\n */\nexport function fold<RDS, R>(\n  remoteData: ArrayTwoOrMore<RDS>,\n  foldHandlers: FoldHandlersA<RDS, R>,\n): ReturnTypesOfFunctionProps<R>;\n\nexport function fold(\n  remoteData: any,\n  { notAsked, loading, failure, success, reloading }: any,\n) {\n  if (Array.isArray(remoteData)) {\n    if (failure) {\n      const failedRds = remoteData.filter(\n        isFailure,\n      ) as unknown as ArrayTwoOrMore<RemoteDataFailure>;\n      if (failedRds.length > 0) {\n        return failure(failedRds.map((rd) => rd.error));\n      }\n    }\n\n    if (loading && remoteData.some(isLoading)) {\n      return loading();\n    }\n\n    if ((reloading || loading) && remoteData.some(isReloading)) {\n      return (reloading || loading)();\n    }\n\n    const successRds = remoteData.filter(\n      isSuccess,\n    ) as unknown as ArrayTwoOrMore<RemoteDataSuccess>;\n\n    if (remoteData.length === successRds.length) {\n      return success(successRds.map((rd) => rd.data));\n    }\n\n    return notAsked();\n  }\n\n  if (loading && remoteData.type === 'LOADING') {\n    return loading();\n  }\n\n  if ((reloading || loading) && remoteData.type === 'RELOADING') {\n    return (reloading || loading)();\n  }\n\n  if (failure && remoteData.type === 'FAILURE') {\n    return failure(remoteData.error);\n  }\n\n  if (remoteData.type === 'SUCCESS') {\n    return success(remoteData.data);\n  }\n\n  return notAsked();\n}\n"],"names":["isLoading","remoteData","Array","isArray","some","rd","type","isReloading","isSuccess","every","isFailure","error","_ref","notAsked","loading","failure","success","reloading","failedRds","filter","length","map","successRds","data","orElse"],"mappings":"oOA2LM,SAAUA,EAAUC,GACxB,OAAOC,MAAMC,QAAQF,GACjBA,EAAWG,KAAK,SAACC,SAAmB,YAAZA,EAAGC,IAAkB,GACzB,YAApBL,EAAWK,IACjB,CAoCgB,SAAAC,EAAYN,GAC1B,OAAOC,MAAMC,QAAQF,GACjBA,EAAWG,KAAK,SAACC,GAAO,MAAY,cAAZA,EAAGC,IAAoB,GAC3B,cAApBL,EAAWK,IACjB,CAoCgB,SAAAE,EAAUP,GACxB,OAAOC,MAAMC,QAAQF,GACjBA,EAAWQ,MAAM,SAACJ,GAAO,MAAY,YAAZA,EAAGC,IAAkB,GAC1B,YAApBL,EAAWK,IACjB,CAoCgB,SAAAI,EAAUT,GACxB,OAAOC,MAAMC,QAAQF,GACjBA,EAAWG,KAAK,SAACC,GAAO,MAAY,YAAZA,EAAGC,IAAkB,GACzB,YAApBL,EAAWK,IACjB,WA3MuB,SAAIK,GAAoC,MAAA,CAC7DL,KAAM,UACNK,MAAAA,EACD,SA+Se,SACdV,EAAeW,GACwC,IAArDC,EAAQD,EAARC,SAAUC,EAAOF,EAAPE,QAASC,EAAOH,EAAPG,QAASC,EAAOJ,EAAPI,QAASC,EAASL,EAATK,UAEvC,GAAIf,MAAMC,QAAQF,GAAa,CAC7B,GAAIc,EAAS,CACX,IAAMG,EAAYjB,EAAWkB,OAC3BT,GAEF,GAAIQ,EAAUE,OAAS,EACrB,OAAOL,EAAQG,EAAUG,IAAI,SAAChB,GAAE,OAAKA,EAAGM,KAAK,GAEhD,CAED,GAAIG,GAAWb,EAAWG,KAAKJ,GAC7B,OAAOc,IAGT,IAAKG,GAAaH,IAAYb,EAAWG,KAAKG,GAC5C,OAAQU,GAAaH,KAGvB,IAAMQ,EAAarB,EAAWkB,OAC5BX,GAGF,OAAIP,EAAWmB,SAAWE,EAAWF,OAC5BJ,EAAQM,EAAWD,IAAI,SAAChB,GAAO,OAAAA,EAAGkB,IAAI,IAGxCV,GACR,CAED,OAAIC,GAA+B,YAApBb,EAAWK,KACjBQ,KAGJG,GAAaH,IAAgC,cAApBb,EAAWK,MAC/BW,GAAaH,KAGnBC,GAA+B,YAApBd,EAAWK,KACjBS,EAAQd,EAAWU,OAGJ,YAApBV,EAAWK,KACNU,EAAQf,EAAWsB,MAGrBV,GACT,2CA7TM,SAAqBZ,GACzB,OAAOC,MAAMC,QAAQF,GACjBA,EAAWG,KAAK,SAACC,SAAmB,cAAZA,EAAGC,IAAoB,GAC3B,cAApBL,EAAWK,IACjB,0CA/EuB,WAA0B,MAAA,CAAEA,KAAM,UAAW,aAX5C,WAAH,MAA8B,CAAEA,KAAM,YAAa,cAsB/C,WAA4B,MAAA,CAAEA,KAAM,YAAa,YAWnD,SAAIiB,SAAmC,CAC5DjB,KAAM,UACNiB,KAAAA,EACD,kBAqQe,SAActB,EAAiBuB,GAC7C,OAAItB,MAAMC,QAAQF,GACTO,EAAUP,GACbA,EAAWoB,IAAI,SAAChB,GAAO,OAAAA,EAAGkB,IAAI,GAC9BC,EAAOvB,GAGTO,EAAUP,GACLA,EAAWsB,KAGbC,EAAOvB,EAChB"}